{"meta":{"title":"JustPureH2Os Site","subtitle":"","description":"JustPureH2Os Personal Blog Site","author":"JustPureH2O","url":"https://en.justpureh2o.cn","root":"/"},"pages":[{"title":"","date":"2025-08-26T11:42:18.757Z","updated":"2025-04-12T04:51:08.121Z","comments":true,"path":"404.html","permalink":"https://en.justpureh2o.cn/404.html","excerpt":"","text":"404 qwq Page was missing~ Nowhere at the end of the Internet... Back to mainpage"},{"title":"Mobile Site Banners","date":"2024-07-21T04:12:21.651Z","updated":"2025-04-12T16:24:39.638Z","comments":true,"path":"banners_mobile.html","permalink":"https://en.justpureh2o.cn/banners_mobile.html","excerpt":"","text":"Click here for desktop site banners. 1 Source：here Blue Archive Takanashi Hoshino·テラー PID：120642947 2 Source：here Blue Archive Tachibana Hikari PID：117347645 3 Source：here Blue Archive Misono Mika PID：98711243 4 Source：here Blue Archive Tachibana Hikari PID：117355676 5 Source：here PID：71663996 Touhou Project Hakurei Reimu 6 Source：here PID：115879391 Blue Archive Sorasaki Hina 7 Source: here 8 Source: here"},{"title":"关于","date":"2023-10-26T12:03:52.000Z","updated":"2025-01-21T13:01:19.145Z","comments":true,"path":"about/index.html","permalink":"https://en.justpureh2o.cn/about/index.html","excerpt":"","text":"Q：自我介绍？ 欢愉的追随者（确信） 2007年生，如今是一名普通的中学生。现居四川成都，目前正在为成都东辰服役…… 现在是一名命数已尽的OIer（指已经退役/AFO），在学校的压力下艰难补习常规课。如今身后已没有退路，由于三个火箭班中的第二名已经满员，此时退出竞赛班也就意味着进入真正意义上的的火箭平行班，也就必须忍受来自某出生年级主任的压力和名誉的损失。 爱好不是很多。最主要分为程序、整活、二次元和音乐四方面。 首先是程序：四年级自学过一段时间的 VB，初一时对 Minecraft 模组编程感兴趣，于是自学了 Java（也简单编过一些），但是（因为国内网络环境太好了）最终搁置了；在初二被某位尤爱摸鱼的“信息技术课程部主任”给提拔到 C++ 进阶班里“学习竞赛”（实际上那位主任上课连来都不来一次），到了高一才算真正开始 OI 之路。由于我本身喜欢折腾一些东西，初中时浅浅研究过一段时间的极域破解，但都不及高中时研究学生机房管理助手时的成就。 第二是整活：最开始只是在八九年级网课期间整一点表情包，后面接触到 PS 和 PR，整活的功底也比较深了。九年级开始整一些视频，到了高中，遇见了某位和我一样同爱整活的同学，因为看到学校的干饭盛况，就情不自禁整了一个东辰干饭实拍，但由于触犯到东辰高层的一些利益被学生会要求删除……本人也是目前教学区四楼干饭记录保持者（中午+下午，均26s，与本文初稿相比提升9s），现在哥几个正在计划来一条本人拍摄的沉浸式抢饭视频……跑操喊口号喜欢把“脚踏实地”吼成“脚踏东辰”；“东辰学子”喊成“东辰倒闭”；“挑战极限”说成“挑战东辰”（也是我们班的倒闭组常态）…… 第三是二次元：说实话番我很少看，主要还是二游的二创。初一时入坑东方，看过一部《东方万华镜》、同年入坑 《Blue Archive》、《原神》（的二创而并非游戏本身）；初二下期入坑《原神》（游戏本身），因为我本人比较喜欢这类开放大世界的游戏，所以直到如今都还在玩（最开始和我一同入坑的小伙伴们都跑去隔壁星穹铁道了）；初三上搞到了《重返未来》的开服号（退坑），紧接着初三下期抢了个《星穹铁道》的公测号，现在这个号是我和同学一起在玩（运气实在太好了导致我那位同学把自己的号都放弃了）；高一让某位同学帮我注册了个《Blue Archive》的国际服账号，但是没过几周国内就拿下了它的版号，因此现在在玩国服（说是玩但实际上都没怎么打开过，要我说还得是它的立绘/剧情更吸引我）；现在（高一下）那些朋友还有玩《物华弥新》、《暗区突围》、《三角洲行动》的……对于我本人，其实更想探索一下早期的起源引擎的作品（例如《传送门》二部曲，已通关）以及 给他爱5（或许会买给他爱6，等出来了再说，先攒点零花钱……）。 最后是音乐：比较喜欢听电子（具体可以看到网站下端的播放器歌单）。最喜欢的还是 Melodic Dubstep、有时会听 Uplifting Trance 等抒情性较强的曲风。 Q：网站建站史？ 早在九年级下、正式进入高中前的暑假，但具体日期忘记了，故以网站静态文件所在的Github仓库的第一次Action执行日期（2023/07/24）为建站日，主页。最开始这个网站是用来记录我初中的那些奇闻轶事，进竞赛班之后这个网站又变成了记录算法学习心得体会的技术性博客。偶尔也会学GGapa那样在网站里面传一些小随笔（不过随便暂时没想好是放在主页里还是另起一个新页面来放），但前提是我得真的有那闲心和灵感写这些随笔毕竟文笔有限写不出啥好文章来…… Q：突出成就/贡献？ 初二上期，双减刚刚出台（2021.9.10），发起举报东辰违规补课的运动，换来一周的正常放假（挺小丑的）。最离谱的是我作为我们班的举报运动发起人，甚至没被班主任制裁，反倒是那些跟风打了电话的人写了六百字检讨（有些被致电家长了）。我还依然记得当时紧急宣布周五下午放学时（一般周六中午放学）家长群里通知的是“为庆祝教师节，提前放学”。但是当天因为某位同学太过高兴把关键人物写进了一篇《消息一则》发在朋友圈里被家长发现然后告诉班主任了…… 高一上制作了一个成都东辰干饭实录，也算是为东辰涨了点流量……如下： 高一下期在两周之内连续抓获三次晚放学后在厕所里搞事情的男女，导致该厕所成为学生会每晚必查的地点之一。 Q：在东辰最令你难忘的事情？ 2022年6月29日， 下午最后一节课，还有两分钟下课（抢饭）。教室的某个角落突然传出一声气体泄露的“呲”声。两秒后，一股刺鼻的硫化物气味便直入鼻腔——教室一侧的某位同学误以为柜子里装着的瓶子里是饮料，殊不知那是养了整整六个月已经胀气的鸡蛋罐头（俗称臭水，我们叫烂昭昭，取自屈原《九歌·云中君》——“灵连蜷兮既留，烂昭昭兮未央”）。好在当时离下课不久，因而没有造成人员中毒。当时坐在一旁的英语老师改着卷子突然脸色就答辩了，最后那个瓶子被班主任勒令丢掉（但是最后被我们捡回来了，不出意外始作俑蛋现在还在那个瓶子里待着）。 Q：你的成绩，人生座右铭？ 成绩在班上排中间，三个火箭班（130多人）正常发挥的话（语数外物化生）能排 名左右？英语比较好，语文在中游，数学看状态，物理不太行，化学靠天意，生物过山车……顺便补充个历政地——历史秦始皇，政治国民党、地理不太强。 忠实的唯物主义者，不批判也不完全认同其他观念，言之有理即可接受；无神论者、无宗教信仰（非要说的话就是芙门✟）。 同时作为一个东辰活跃的法外狂徒，还践行着： 一日一惡 坚定不移、矢志不渝地走欢愉道路 Q：最让你自豪的事情？ 24年4月份清明节那会当了中国第一批游玩 You.Fo 的人之一（顺便还拉上了我的 OIer 好友） Q：最喜欢的一句话？ 「 Vanitas vanitatum omnia vanitas 」（因为是老婆说的） Q：有什么目标？ 高考给力点至少 往上吧，至少也得成都电子科大，C9清北努把力能上当然就上。"},{"title":"Banners","date":"2024-04-21T05:04:26.891Z","updated":"2025-08-17T08:21:27.491Z","comments":true,"path":"banners/index.html","permalink":"https://en.justpureh2o.cn/banners/index.html","excerpt":"","text":"Comin' for your waifu, right? Click here to view banners on mobile clients. 1 Image URL: here Honkai: Star Rail Firefly In-game capture 2 Image URL: here Honkai: Star Rail Sparkle In-game capture 3 Image URL: here Honkai: Star Rail Firefly&amp;Stellar In-game capture 4 Image URL: here GenshinImpact Furina Fanart 5 Image URL: here GenshinImpact Furina Fanart 6 Image URL: here Vocaloid MikuSnow Fanart 画师：Lunami Pixiv：雪·月 PID：65261833 7 Image URL: here GenshinImpact Furina Fanart 8 Image URL: here Honkai: Star Rail Fuxuan Fanart 9 Image URL: here Honkai: Star Rail In-game capture 10 Image URL: here Honkai: Star Rail Firefly In-game capture 11 Image URL: here Honkai: Star Rail In-game capture 12 Image URL: here Honkai: Star Rail Firefly&amp;Stellar Fanart PID：116220666 13 Image URL: here Honkai: Star Rail Firefly&amp;Stellar Fanart PID：116629910 14 Image URL: here BlueArchive Hanako In-game assets 15 Image URL: here BlueArchive Mika In-game assets 16 Image URL: here BlueArchive Hifumi In-game assets 17 Image URL: here BlueArchive Azusa Swimsuit Memory Lobby 18 Image URL: here BlueArchive Wanako Memory Lobby 19 Image URL: here BlueArchive Miyako Memory Lobby 20 Image URL: here BlueArchive Aris Maid Memory Lobby 21 Image URL: here BlueArchive Airi Memory Lobby 22 Image URL: here BlueArchive Kayoko Memory Lobby 23 Image URL: here BlueArchive In-game assets 24 Image URL: here Honkai: Star Rail 知更鸟&amp;Stellar期日 In-game assets 25 Image URL: here BlueArchive Fanart 26 Image URL: here BlueArchive Midori Memory Lobby 27 Image URL: here BlueArchive Mika Memory Lobby 28 Image URL: here BlueArchive Chise Memory Lobby 29 Image URL: here Post: X @kokola BlueArchive Fanart 30 Image URL: here GenshinImpact Hutao Fanart 31 Image URL: here PID：117436869 BlueArchive Hoshino AI-generated 32 Image URL: here BlueArchive Hoshino (Armed) Memory Lobby 33 Image URL: here BlueArchive Azusa PID：90207887 34 Image URL: here GenshinImpact Photograph By JustPureH2O 35 Image URL: here BlueArchive 3rd Anniversary Yandre #1141489 36 Image URL: here BlueArchive Azusa AI PID：116291715 P4 37 Image URL: here ProjectKV Post: X @DynamisOne 38 Image URL: here BlueArchive Plana In-game capture 39 Image URL: here BlueArchive Mari PID：116865185 40 Image URL: here BlueArchive Kazunoha PID：111691496 41 Image URL: here BlueArchive Kayoko&amp;Mutsuki Post: Danbooru 42 Image URL: here BlueArchive Shiroko Post: Danbooru 43 Image URL: here TouhouProject Reimu 44 Image URL: here 45 Image URL: here 46 Image URL: here 47 Image URL: here 48 Image URL: here PID：124671779 49 Image URL: here 50 Image URL: here The NOexistenceN of you AND me Lilith In-game capture 51 Image URL: here The NOexistenceN of you AND me Lilith In-game capture 52 Image URL: here The NOexistenceN of you AND me Lilith In-game capture 53 Image URL: here 54 Image URL: here 55 Image URL: here 56 Image URL: here MushokuTensei RoxyMigurdia 57 Image URL: here HatsuneMiku PID: 129850582 58 Image URL: here HatsuneMiku PID: 122436164 59 Image URL: here MushokuTensei RoxyMigurdia 60 Image URL: here BlueArchive 4.5thAnniversaryWebsite 61 Image URL: here GenshinImpact Nahida Illustrator: ku9625 62 Image URL: here Illustrator: ku9625 63 Image URL：here BlueArchive TakanashiHoshino Illustrator: ku9625 64 Image URL: here TouhouProject KomeijiKoishi PID: 102017273 65 ImageURL: here HonkaiStarRail Firefly PID: 133242321 66 ImageURL: here HonkaiStarRail Trinnon (Left) Tribbie (Middle) Trianne (Right) PID: 131998699"},{"title":"All Categories","date":"2025-08-26T11:42:18.758Z","updated":"2025-04-05T12:17:30.799Z","comments":false,"path":"categories/index.html","permalink":"https://en.justpureh2o.cn/categories/index.html","excerpt":"","text":""},{"title":"Friend Sites","date":"2025-08-26T11:42:18.794Z","updated":"2025-04-05T12:17:13.320Z","comments":true,"path":"friends/index.html","permalink":"https://en.justpureh2o.cn/friends/index.html","excerpt":"","text":"loadQexoFriends(\"qexo-friends\", \"https://admin.en.justpureh2o.cn\")"},{"title":"All Page Tags","date":"2023-10-26T12:56:08.000Z","updated":"2025-04-05T12:18:01.112Z","comments":false,"path":"tags/index.html","permalink":"https://en.justpureh2o.cn/tags/index.html","excerpt":"","text":""},{"title":"说说","date":"2024-03-08T18:47:55.818Z","updated":"2025-04-05T12:18:49.372Z","comments":false,"path":"talks/index.html","permalink":"https://en.justpureh2o.cn/talks/index.html","excerpt":"","text":"showQexoTalks(\"qexot\", \"https://admin.en.justpureh2o.cn\", 5)"}],"posts":[{"title":"A-Star Algorithm: Shortest Path Search Algorithm","slug":"algorithm-a-star","date":"2025-04-05T07:19:39.348Z","updated":"2025-04-05T09:57:26.586Z","comments":true,"path":"articles/685/","link":"","permalink":"https://en.justpureh2o.cn/articles/685/","excerpt":"","text":"双语页面本页面支持简体中文，点我以跳转至中文站界面。 Thus spoke JustPureH2O, the newbie Crosstalker (Scene) Throw away your Dijkstra, let's talk about A*! I know that one. A* is adjugate to matrix A, a linear algebra concept which means... Stop your nonsense talking! Why mention linear algebra? Enumerate its cofactor and then... Nonono, stop! The A* algorithm here is used to find a shortest path in graphs. Navigators use this algorithm as its core. A* is one of the search algorithms, and the heuristic version is called IDA*... LOL, I can do this with just simple BFS. But different. A* is running on test data approximately . BFS will get a TLE. So, did you listen to me carefully? What is A*? It's adjugate to matrix A. Damn! (Scene) Brief Introduction to A* As a careful listener, you will know that A* algorithm is categorized under heuristic search algorithms. But why is it named A*? I think you should better ask the one who named it. I don't know the reason. A* algorithm is like capitalists. For graphs which contains sea of nodes, we need to find the shortest path between given starting and ending node. BFS resembles a perfectionist who failed to deal with distinct weights (0/1 shortest path), and it must scan all the edges to find the shortest one. Dijkstra is better at weights, but failed to manage negative weights (Bellman-Ford should fix this), and it is close to BFS that it also needs to scan large amount of nodes. A* is much more clever, as it uses a evaluation function to decide whether the current solution will pass this node ahead. Given that it has reduced huge inefficient traversals, the elapse will much shorter. To implement this, we need to give a small change to Dijkstra optimized with heap: Change distance-first priority queue to evaluated-first. Others remain almost the same. Enumerating edges stretched out and then pushing them into the queue. When the destination node is popped out, return the shortest path. How to calculate the value of each node? First get the true distance from local node to departure node as . Second, estimate the remaining distance to destination as . Sum them as our evaluation . Noted that Dijkstra is a special case when because it doesn't take evaluation step. Notes Priority queue: Before you push a new node, the keyword used to sort should be . When the departure point is about to be handle, because its true distance is actually . Evaluation: varies in different cases. In Eight Digits Problem, points to the Manhattan Distance from current state to given state. As for USACO08MAR Cow Jogging G, it refers to the shortest distance to destination. Thus you need to reset to fit requirements. Instances Eight Digits Problem Portal: here Difficulty：1600-1900 Source：Summer Camp Fujian On a chessboard lies 8 digits from 1 to 8, along with a spacebar marked as . Digits around the spacebar can move into it. You need to figure out the least-step solution which transforms the initial state given in test datas to the destination state , and output the step count. Try solving it with BFS. We must list all the states we could make. When the destination is firstly reached, return the result. Then have a look about A* algorithm, we need to find out a way to evaluate the state. Why not calculating the difference between states so that we can quantify the distance. For detail, we can sum the position difference like current position minus target position. Final code: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include &lt;bits/stdc++.h&gt;using namespace std;typedef pair&lt;int, string&gt; STATE;unordered_map&lt;string, int&gt; dist;priority_queue&lt;STATE, vector&lt;STATE&gt;, greater&lt;&gt;&gt; q;string st, ed = \"123804765\";int f(const string &amp;now) { int res = 0; for (int i = 0; i &lt; 9; i++) { if (now[i] == '0') continue; switch (now[i] - '0') { case 1: case 2: case 3: res += abs(i / 3) + abs(i % 3 - (now[i] - '1') % 3); break; case 4: res += abs(i / 3 - 1) + abs(i % 3 - 2); break; case 5: res += abs(i / 3 - 2) + abs(i % 3 - 2); break; case 6: res += abs(i / 3 - 2) + abs(i % 3 - 1); break; case 7: res += abs(i / 3 - 2) + abs(i % 3); break; case 8: res += abs(i / 3 - 1) + abs(i % 3); break; } } return res;}int bfs() { int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1}; q.push((STATE) {f(st), st}); dist[st] = 0; while (!q.empty()) { STATE s = q.top(); q.pop(); if (s.second == ed) return dist[s.second]; int idxx = 0, idxy = 0; for (int i = 0; i &lt; 9; i++) { if (s.second[i] == '0') { idxx = i / 3, idxy = i % 3; break; } } string src = s.second; string tmp = s.second; for (int i = 0; i &lt; 4; i++) { int nx = idxx + dx[i], ny = idxy + dy[i]; if (nx &lt; 0 || nx &gt; 2 || ny &lt; 0 || ny &gt; 2) continue; tmp = src; swap(tmp[idxx * 3 + idxy], tmp[nx * 3 + ny]); if (!dist.count(tmp) || dist[tmp] &gt; dist[src] + 1) { dist[tmp] = dist[src] + 1; q.push((STATE) {f(tmp) + dist[tmp], tmp}); } } } return -1;}int main() { ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); cin &gt;&gt; st; cout &lt;&lt; bfs() &lt;&lt; endl; return 0;} [USACO08MAR] Cow Jogging G Portal: here Difficulty: 2000-2300 Source：USACO 2008 Simplified description: You are given a graph, and output the length of the first, second, third to the k-th shortest path from node to node . Here is a nature concerning this algorithm: The total length of the path is the k-th shortest when the destination has popped out from the queue for exactly times Given the rule, we can run the program in a loop in bound of , calculating the length from the shortest to the k-th shortest. Exceptionally, just output when the total combinations of paths is fewer than . We can record the shortest path by running shortest path algorithm on the reversed graph. Final code: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include &lt;bits/stdc++.h&gt;#define N 10010using namespace std;typedef long long ll;typedef pair&lt;ll, int&gt; Point;typedef pair&lt;ll, Point&gt; Star;struct Edge { int ne, to; ll w;} edges[N &lt;&lt; 2];int h[N], rh[N];bool st[N];priority_queue&lt;Point, vector&lt;Point&gt;, greater&lt;&gt;&gt; q;priority_queue&lt;Star, vector&lt;Star&gt;, greater&lt;&gt;&gt; heap;int astar_cnt = 0;ll dist[N];int idx = 0;int n, m;void add(int he[], int u, int v, ll w) { idx++; edges[idx].to = v; edges[idx].ne = he[u]; edges[idx].w = w; he[u] = idx;}void dijkstra() { q.push((Point) {0, 1}); dist[1] = 0; while (!q.empty()) { Point p = q.top(); q.pop(); int id = p.second; if (st[id]) continue; st[id] = true; for (int i = rh[id]; ~i; i = edges[i].ne) { int j = edges[i].to; if (dist[j] &gt; dist[id] + edges[i].w) { dist[j] = dist[id] + edges[i].w; q.push((Point) {dist[j], j}); } } }}ll a_star(int k) { heap.push((Star) {dist[n], (Point) {0, n}}); while (!heap.empty()) { Star p = heap.top(); heap.pop(); if (p.second.second == 1) astar_cnt++; if (astar_cnt == k) return p.second.first; for (int i = h[p.second.second]; ~i; i = edges[i].ne) { int j = edges[i].to; heap.push((Star) {dist[j] + edges[i].w + p.second.first, (Point) {p.second.first + edges[i].w, j}}); } } return -1;}void restore() { astar_cnt = 0; heap = priority_queue&lt;Star, vector&lt;Star&gt;, greater&lt;&gt;&gt;();}int main() { ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); memset(h, -1, sizeof h); memset(rh, -1, sizeof rh); memset(dist, 0x3f, sizeof dist); int k; cin &gt;&gt; n &gt;&gt; m &gt;&gt; k; for (int i = 1; i &lt;= m; i++) { int x, y; ll d; cin &gt;&gt; x &gt;&gt; y &gt;&gt; d; add(h, x, y, d); add(rh, y, x, d); } dijkstra(); bool flag = false; for (int i = 1; i &lt;= k; i++) { if (flag) cout &lt;&lt; -1 &lt;&lt; endl; else { restore(); ll res = a_star(i); cout &lt;&lt; res &lt;&lt; endl; flag = (res == -1); } } return 0;}","categories":[{"name":"OI algorithms","slug":"OI-algorithms","permalink":"https://en.justpureh2o.cn/categories/OI-algorithms/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"https://en.justpureh2o.cn/tags/algorithm/"},{"name":"oi","slug":"oi","permalink":"https://en.justpureh2o.cn/tags/oi/"},{"name":"search algo","slug":"search-algo","permalink":"https://en.justpureh2o.cn/tags/search-algo/"}]},{"title":"[In-Site Broadcast 2025.04.03] Hello World!","slug":"broadcast-250403-helloworld","date":"2025-04-03T16:17:02.679Z","updated":"2025-04-05T10:16:35.468Z","comments":true,"path":"articles/24189/","link":"","permalink":"https://en.justpureh2o.cn/articles/24189/","excerpt":"","text":"Hello World! After about a week's preparation, the English Version of JustPureH2O's Site is finally live at en.justpureh2o.cn. I've got everything you want to know about this site below. Q: Who are you? I'm JustPureH2O, an online content creator posts articles mainly in algorithms and essays. Also a senior high student in ChengDu, Sichuan Province. In general cases, this website is weekly-updated. For more information about me, please see About Me Page Q: Why I18n? I18n is short for internationalization, which literally means a foreign-language-translated content. When I was writing in Mandarin Site, I thought of creating English contents given that it's still the most widely supported language around the globe, and after a long-term brain fight club, the site was finally brought forth. I want to share daily moments with people around the world who speaks English, posting to convey happiness and positivity. As the cross-nation cultures continue to mend, I hope this site can serve as a meduim to bridge the gap between China and other countries worldwide. Q: What does the site features? As you guys might have seen in this website, I post articles mainly feature algorithms for OI. In Mandarin site I also posted some articles about exam-oriented contents especially in maths and physics, but given the different curriculum standards between China and other countries, I may not translate those articles into English genrally. At the very bottom of every page in the website lies a mini player consists of tracks I've collected in my personal mix. Most of them are trance musics. You can also control the player just right click your mouse. The site is running on Volanis theme forked and customized by myself. You might have seen the animated head image in some articles. New features are positively under construction. Up to now, the translation is still incomplete throughout the site. The 100% translation will be on soon. Q: What does the quotations mean? \"Delve forms of round and rectilinear. Perfect tools that curved and norm.\" is excerpted from Preface to the Euclid's Element in Literary Chinese by Xu Guangqi. Original words are \"穷方圆平直之情，尽规矩准绳之用\". I failed to find the official English translation toward that line, so I just translated it myself. \"All around the world there's people looking for our story\" is a lyric drawn from a track named Cool In My Disaster. You can also enjoy this track in the player at the very bottom in every page of this site. A randomized line of Chinese poem substitutes for this line in Mandarin site. Q: How can I know which post is bilingual? In English site, bilingual articles is marked as \"bilingual\" at the beginning of the post. It is shown in a small box like below: 本页面支持简体中文，点我以跳转至中文站页面。 Relatively, in Mandarin site, it is written in English: Current page is available in English. Click here toread fully. This entrance is designed for those who is accidentally linked to the wrong translation site, or someone who wants to challenge himself in foreign language reading. The mark will be an instant entrance to guide you to the same aricle posted in the other language. Q: How can I send my feedback to blogger properly/How can I comment my opinions properly? You can DM me on GitHub or through my personal E-mail. You must be warned that mails include these contents below are strictly forbidden: Adult/Porn contents or links. Political sensitive contents, like conspiracy theroies about Taiwan Province. Commercial feed/Fraudulent messages or links/Meaningless junk E-mails, like messages full of repeating and meaningless characters. Offensive comments/Racial discrimination Illegal trade or smuggling activities Sea of repeating messages, you can express your point of view freely but please don't post them again and again every second and every moment Your address will be immediately banned by me once I discover any violation of the terms above. Remember that you are free to discuss about knowledge or translation issues and your personal thoughts about my website. We can also be friends if you like. Given that I'm currently studying in a boarding school, I'm probably offline on weekdays (except Chinese holidays that fall on weekdays), but I will absolutely go through your priceless advice as soon as possible. Q: I'm a blogger too. What should I do to make my website on your friend site links? In accordance with \"friend site exchange\" principle, you need to post my site's link on your friend site page first. Second, make sure that your blog is accessible, and doesn't contain any illegal/political sensitive contents, and at least have 10 or more original articles. The date of the last published article should be within 6 months. If your blog fits all the requirements above, you can comment under the friend site page, along with your site's title, favicon, and a brief subtitle if you like. If you need to change the website URL, please comment under the friend site page. The validity of the friend site links will be checked every month Lastly, have fun here!","categories":[],"tags":[]}],"categories":[{"name":"OI algorithms","slug":"OI-algorithms","permalink":"https://en.justpureh2o.cn/categories/OI-algorithms/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"https://en.justpureh2o.cn/tags/algorithm/"},{"name":"oi","slug":"oi","permalink":"https://en.justpureh2o.cn/tags/oi/"},{"name":"search algo","slug":"search-algo","permalink":"https://en.justpureh2o.cn/tags/search-algo/"}]}